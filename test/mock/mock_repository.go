// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	internal "matcher/internal"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// GetNearestDriver mocks base method.
func (m *MockIRepository) GetNearestDriver(port int, lat, long float64, api_key string) (*internal.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearestDriver", port, lat, long, api_key)
	ret0, _ := ret[0].(*internal.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearestDriver indicates an expected call of GetNearestDriver.
func (mr *MockIRepositoryMockRecorder) GetNearestDriver(port, lat, long, api_key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearestDriver", reflect.TypeOf((*MockIRepository)(nil).GetNearestDriver), port, lat, long, api_key)
}
